From f47bdca753aa1b1fcde73e6439dab934a5f7fc0e Mon Sep 17 00:00:00 2001
From: Frank Du <frank.du@intel.com>
Date: Mon, 27 Nov 2023 13:32:13 +0800
Subject: [PATCH] xdp: add set rate_kbps support for the tx_maxrate sys

Signed-off-by: Frank Du <frank.du@intel.com>
---
 src/ice_main.c | 62 +++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 61 insertions(+), 1 deletion(-)

diff --git a/src/ice_main.c b/src/ice_main.c
index 36da2ea..704eaec 100644
--- a/src/ice_main.c
+++ b/src/ice_main.c
@@ -30,7 +30,7 @@
 #define DRV_VERSION_MINOR 12
 #define DRV_VERSION_BUILD 7
 
-#define DRV_VERSION	"Kahawai_1.12.7_20231116"
+#define DRV_VERSION	"Kahawai_XDP_1.12.7_20231127"
 #define DRV_SUMMARY	"Intel(R) Ethernet Connection E800 Series Linux Driver"
 #ifdef ICE_ADD_PROBES
 #define DRV_VERSION_EXTRA "_probes"
@@ -7910,6 +7910,58 @@ static void ice_set_rx_mode(struct net_device *netdev)
 	ice_service_task_schedule(vsi->back);
 }
 
+static int
+mtl_set_tx_maxrate(struct net_device *netdev, int queue_index, u32 rate_kbps)
+{
+	struct ice_netdev_priv *np = netdev_priv(netdev);
+	struct ice_vsi *vsi = np->vsi;
+	struct ice_tx_ring* ring;
+	u16 q_handle;
+	int status;
+	u8 tc;
+	bool xdp;
+
+	/* Validate rate_kbps requested is within permitted range */
+	if (rate_kbps > ICE_SCHED_MAX_BW) {
+		netdev_err(netdev, "%s, Invalid max rate %d specified for the queue %d\n",
+			   __func__, rate_kbps, queue_index);
+		return -EINVAL;
+	}
+
+	if (vsi->xdp_rings && vsi->xdp_rings[queue_index] && vsi->xdp_rings[queue_index]->xsk_pool) {
+		ring = vsi->xdp_rings[queue_index];
+		xdp = true;
+	} else {
+		ring = vsi->tx_rings[queue_index];
+		xdp = false;
+	}
+
+	q_handle = ring->q_handle;
+	tc = ice_dcb_get_tc(vsi, queue_index);
+
+	vsi = ice_locate_vsi_using_queue(vsi, queue_index);
+	if (!vsi) {
+		netdev_err(netdev, "%s, Invalid VSI for given queue %d\n",
+			   __func__, queue_index);
+		return -EINVAL;
+	}
+
+	/* Set BW back to default, when user set rate_kbps to 0 */
+	if (!rate_kbps)
+		status = ice_cfg_q_bw_dflt_lmt(vsi->port_info, vsi->idx, tc,
+					       q_handle, ICE_MAX_BW);
+	else
+		status = ice_cfg_q_bw_lmt(vsi->port_info, vsi->idx, tc,
+					  q_handle, ICE_MAX_BW, rate_kbps);
+	if (status)
+		netdev_err(netdev, "%s, Unable to set Tx max rate %u, error %d\n",
+			   __func__, rate_kbps, status);
+	else
+		netdev_info(netdev, "%s, rate_kbps %u succ, xdp ring %s\n", __func__,
+				rate_kbps, xdp ? "yes" : "no");
+	return status;
+}
+
 #ifdef HAVE_NDO_SET_TX_MAXRATE
 /**
  * ice_set_tx_maxrate - NDO callback to set the maximum per-queue bitrate
@@ -7926,6 +7978,14 @@ ice_set_tx_maxrate(struct net_device *netdev, int queue_index, u32 maxrate)
 	int status;
 	u8 tc;
 
+	if (maxrate & 0x80000000) {
+		/* wa with bps unit */
+		maxrate &= ~0x80000000;
+		netdev_info(netdev, "%s, max rate_kbps %d specified for the queue %d\n",
+					__func__, maxrate, queue_index);
+		return mtl_set_tx_maxrate(netdev, queue_index, maxrate);
+	}
+
 	/* Validate maxrate requested is within permitted range */
 	if (maxrate && (maxrate > (ICE_SCHED_MAX_BW / 1000))) {
 		netdev_err(netdev, "Invalid max rate %d specified for the queue %d\n",
-- 
2.34.1

