name: ubuntu-build

inputs:
  # Before MTL build install
  setup-environment:
    description: "Set up environment"
    required: false
    default: "1"
  setup-build-and-install-dpdk:
    description: "Build and install DPDK"
    required: false
    default: "1"
  setup-build-and-install-ice-driver:
    description: "Build and install ICE driver"
    required: false
    default: "0"
  setup-build-and-install-ebpf-xdp:
    description: "Build and install eBPF XDP"
    required: false
    default: "1"
  setup-build-and-install-gpu-direct:
    description: "Build and install GPU Direct"
    required: false
    default: "1"

  # MTL build and install
  mtl-build-and-install-debug:
    description: "MTL build and install debug"
    required: false
    default: "0"
  mtl-build-and-install:
    description: "MTL build and install"
    required: false
    default: "0"
  mtl-build-and-install-docker:
    description: "MTL build and install Docker"
    required: false
    default: "0"
  mtl-build-and-install-docker-manager:
    description: "MTL build and install Docker manager"
    required: false
    default: "0"

  # After MTL build
  ecosystem-build-and-install-ffmpeg-plugin:
    description: "Ecosystem build and install FFmpeg plugin"
    required: false
    default: "0"
  ecosystem-build-and-install-gstreamer-plugin:
    description: "Ecosystem build and install GStreamer plugin"
    required: false
    default: "0"
  ecosystem-build-and-install-rist-plugin:
    description: "Ecosystem build and install RIST plugin"
    required: false
    default: "0"
  ecosystem-build-and-install-msdk-plugin:
    description: "Ecosystem build and install MSDK plugin"
    required: false
    default: "0"
  ecosystem-build-and-install-obs-plugin:
    description: "Ecosystem build and install OBS plugin"
    required: false
    default: "0"

  plugin-build-and-install-sample:
    description: "Plugin build and install sample"
    required: false
    default: "0"
  plugin-build-and-install-plugin-avcodec:
    description: "Plugin build and install plugin avcodec"
    required: false
    default: "0"

  hook-python:
    description: "Hook Python"
    required: false
    default: "0"
  hook-rust:
    description: "Hook Rust"
    required: false
    default: "0"

  tools-build-and-install-mtl-monitors:
    description: "Tools build and install mtl monitors"
    required: false
    default: "0"
  tools-build-and-install-mtl-readpcap:
    description: "Tools build and install mtl readpcap"
    required: false
    default: "0"
  tools-build-and-install-mtl-cpu-emulator:
    description: "Tools build and install mtl cpu emulator"
    required: false
    default: "0"

  # CICD ONLY ARGUMENTS
  cicd-build:
    description: "CICD build"
    required: false
    default: "1"
  cicd-build-build-ice-driver:
    description: "CICD build build ICE driver"
    required: false
    default: "1"

env:
  # Before MTL build install
  SETUP_ENVIRONMENT: ${{ inputs.setup-environment }}
  SETUP_BUILD_AND_INSTALL_DPDK: ${{ inputs.setup-build-and-install-dpdk }}
  SETUP_BUILD_AND_INSTALL_ICE_DRIVER: ${{ inputs.setup-build-and-install-ice-driver }}
  SETUP_BUILD_AND_INSTALL_EBPF_XDP: ${{ inputs.setup-build-and-install-ebpf-xdp }}
  SETUP_BUILD_AND_INSTALL_GPU_DIRECT: ${{ inputs.setup-build-and-install-gpu-direct }}

  # MTL build and install
  MTL_BUILD_AND_INSTALL_DEBUG: ${{ inputs.mtl-build-and-install-debug }}
  MTL_BUILD_AND_INSTALL: ${{ inputs.mtl-build-and-install }}
  MTL_BUILD_AND_INSTALL_DOCKER: ${{ inputs.mtl-build-and-install-docker }}
  MTL_BUILD_AND_INSTALL_DOCKER_MANAGER: ${{ inputs.mtl-build-and-install-docker-manager }}

  # After MTL build
  ECOSYSTEM_BUILD_AND_INSTALL_FFMPEG_PLUGIN: ${{ inputs.ecosystem-build-and-install-ffmpeg-plugin }}
  ECOSYSTEM_BUILD_AND_INSTALL_GSTREAMER_PLUGIN: ${{ inputs.ecosystem-build-and-install-gstreamer-plugin }}
  ECOSYSTEM_BUILD_AND_INSTALL_RIST_PLUGIN: ${{ inputs.ecosystem-build-and-install-rist-plugin }}
  ECOSYSTEM_BUILD_AND_INSTALL_MSDK_PLUGIN: ${{ inputs.ecosystem-build-and-install-msdk-plugin }}
  ECOSYSTEM_BUILD_AND_INSTALL_OBS_PLUGIN: ${{ inputs.ecosystem-build-and-install-obs-plugin }}

  PLUGIN_BUILD_AND_INSTALL_SAMPLE: ${{ inputs.plugin-build-and-install-sample }}
  PLUGIN_BUILD_AND_INSTALL_PLUGIN_AVCODEC: ${{ inputs.plugin-build-and-install-plugin-avcodec }}

  HOOK_PYTHON: ${{ inputs.hook-python }}
  HOOK_RUST: ${{ inputs.hook-rust }}

  TOOLS_BUILD_AND_INSTALL_MTL_MONITORS: ${{ inputs.tools-build-and-install-mtl-monitors }}
  TOOLS_BUILD_AND_INSTALL_MTL_READPCAP: ${{ inputs.tools-build-and-install-mtl-readpcap }}
  TOOLS_BUILD_AND_INSTALL_MTL_CPU_EMULATOR: ${{ inputs.tools-build-and-install-mtl-cpu-emulator }}

  # CICD ONLY ARGUMENTS
  CICD_BUILD: ${{ inputs.cicd-build }}
  CICD_BUILD_BUILD_ICE_DRIVER: ${{ inputs.cicd-build-build-ice-driver }}

runs:
  using: "composite"
  steps:
    - name: Harden Runner
      uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
      with:
        egress-policy: audit

    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: run script  
      shell: bash
      working-directory: "${{ github.workspace }}/.github/scripts"
      run: sudo -E ./setup_environment.sh