name: gtest-bare-metal

on:
  # allow manually trigger
  workflow_dispatch:
    inputs:
      branch-to-checkout:
        type: string
        default: 'main'
        required: false
        description: 'Branch name to use'
  push:
    branches:
      - main
      - 'maint-**'
  pull_request:
    branches:
      - main
      - 'maint-**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  gtest-check-for-changes:
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: read
    outputs:
      changed: ${{ steps.filter.outputs.linux_gtest == 'true' }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v2
        id: filter
        with:
          filters: .github/path_filters.yml

  run-tests:
    needs: gtest-check-for-changes
    if: github.repository == 'OpenVisualCloud/Media-Transport-Library' && (needs.gtest-check-for-changes.outputs.changed == 'true' || github.event_name == 'workflow_dispatch')
    runs-on: [self-hosted, linux, x64, dpdk]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit

      - name: Checkout MTL
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: '${{ inputs.branch-to-checkout || github.sha || github.ref }}'

      - name: Install the build dependency
        run: |
          sudo apt-get update -y && \
          sudo apt-get install -y \
              git gcc meson \
              python3-dev \
              python3-pyelftools \
              libjson-c-dev libpcap-dev libgtest-dev \
              libsdl2-dev libsdl2-ttf-dev libssl-dev \
              pkg-config libnuma-dev \
              systemtap-sdt-dev && \
          sudo apt-get autoremove -y

      - name: Build
        run: |
          ./build.sh
          sudo ldconfig

      - name: Check if Kahawai driver version is loaded
        run: |
          sudo dmesg | grep "Intel(R) Ethernet Connection .* version Kahawai.*"

      - name: Kill previous gtest routine
        run: |
          sudo killall -SIGINT KahawaiTest || true
          sudo killall -SIGINT KahawaiUfdTest || true
          sudo killall -SIGINT KahawaiUplTest || true
          sudo killall -SIGINT MtlManager || true

      - name: 'preparation: Evaluate and set test ports'
        run: |
          TEST_PORT_P=$(./script/nicctl.sh  list all | awk '$3 == "vfio-pci" {print $2}' | shuf -n 1)
          TEST_PORT_R=$(./script/nicctl.sh  list all | grep -v "${TEST_PORT_P}" | awk '$3 == "vfio-pci" {print $2}' | shuf -n 1)

          if [ -z "$TEST_PORT_P" ] || [ -z "$TEST_PORT_R" ]; then
              pf=$(./script/nicctl.sh  list all | awk '$3 == "ice" {print $2}' | shuf -n 1)
              sudo ./script/nicctl.sh create_tvf "$pf"

              TEST_PORT_P=$(./script/nicctl.sh  list all | awk '$3 == "vfio-pci" {print $2}' | shuf -n 1)
              TEST_PORT_R=$(./script/nicctl.sh  list all | grep -v "${TEST_PORT_P}" | awk '$3 == "vfio-pci" {print $2}' | shuf -n 1)
          fi

          echo "TEST_PORT_P=$TEST_PORT_P" >> "$GITHUB_ENV"
          echo "TEST_PORT_R=$TEST_PORT_R" >> "$GITHUB_ENV"
          sed -i "s+REPLACE_BY_CICD_TEST_PORT_P+${TEST_PORT_P}+" .github/workflows/upl_gtest.json
          sed -i "s+REPLACE_BY_CICD_TEST_PORT_R+${TEST_PORT_R}+" .github/workflows/upl_gtest.json
          echo "Selected ports: P=$TEST_PORT_P, R=$TEST_PORT_R"

      - name: Start MtlManager at background
        run: |
          sudo MtlManager &

      - name: Start digest_1080p_timeout_interval test
        run: |
          sudo ./build/tests/KahawaiTest --auto_start_stop --p_port "${TEST_PORT_P}" --r_port "${TEST_PORT_R}" --dma_dev "${TEST_DMA_PORT_P},${TEST_DMA_PORT_R}" --rss_mode l3_l4 --pacing_way tsc --iova_mode pa --multi_src_port --gtest_filter=*digest_1080p_timeout_interval*

      - name: Run ufd test case
        run: |
          sudo ./build/tests/KahawaiUfdTest --p_port "${TEST_PORT_P}" --r_port "${TEST_PORT_R}"

      - name: Run shared ufd test case
        run: |
          sudo ./build/tests/KahawaiUfdTest --p_port "${TEST_PORT_P}" --r_port "${TEST_PORT_R}" --queue_mode shared

      - name: Run shared ufd test case with lcore
        run: |
          sudo ./build/tests/KahawaiUfdTest --p_port "${TEST_PORT_P}" --r_port "${TEST_PORT_R}" --queue_mode shared --udp_lcore

      - name: Run ufd test case with rss
        run: |
          sudo ./build/tests/KahawaiUfdTest --p_port "${TEST_PORT_P}" --r_port "${TEST_PORT_R}" --rss_mode l3_l4

      - name: Run udp ld preload test case
        run: |
          sudo MUFD_CFG=.github/workflows/upl_gtest.json LD_PRELOAD=/usr/local/lib/x86_64-linux-gnu/libmtl_udp_preload.so ./build/tests/KahawaiUplTest --p_sip 192.168.2.80 --r_sip 192.168.2.81

      - name: Run st2110-1x test cases
        run: "sudo ./build/tests/KahawaiTest --auto_start_stop --p_port \"${TEST_PORT_P}\" --r_port \"${TEST_PORT_R}\" --dma_dev \"${TEST_DMA_PORT_P},${TEST_DMA_PORT_R}\" --gtest_filter=*st1*:*St1*"

      - name: Run st2110-20 test cases
        run: "sudo ./build/tests/KahawaiTest --auto_start_stop --p_port \"${TEST_PORT_P}\" --r_port \"${TEST_PORT_R}\" --dma_dev \"${TEST_DMA_PORT_P},${TEST_DMA_PORT_R}\" --gtest_filter=*st20*:*St20*:*st21*:*St21*"

      - name: Run st2110-22 test cases
        run: "sudo ./build/tests/KahawaiTest --auto_start_stop --p_port \"${TEST_PORT_P}\" --r_port \"${TEST_PORT_R}\" --dma_dev \"${TEST_DMA_PORT_P},${TEST_DMA_PORT_R}\" --gtest_filter=*st22*:*St22*"

      - name: Run st2110-3x test cases
        run: "sudo ./build/tests/KahawaiTest --auto_start_stop --p_port \"${TEST_PORT_P}\" --r_port \"${TEST_PORT_R}\" --dma_dev \"${TEST_DMA_PORT_P},${TEST_DMA_PORT_R}\" --gtest_filter=*st3*:*St3*"

      - name: Run st2110-4x test cases
        run: "sudo ./build/tests/KahawaiTest --auto_start_stop --p_port \"${TEST_PORT_P}\" --r_port \"${TEST_PORT_R}\" --dma_dev \"${TEST_DMA_PORT_P},${TEST_DMA_PORT_R}\" --gtest_filter=*st4*:*St4*"

      - name: Run st2110 st20p test case in simulation ENA environment [pacing_way=auto]
        run: "sudo ./build/tests/KahawaiTest --auto_start_stop --p_port \"${TEST_PORT_P}\" --r_port \"${TEST_PORT_R}\" --dma_dev \"${TEST_DMA_PORT_P},${TEST_DMA_PORT_R}\" --rss_mode l3_l4 --pacing_way auto --iova_mode pa --multi_src_port --gtest_filter=Main.*:St20p*:-*ext*"

      - name: Run st2110 st20p test case in simulation ENA environment [pacing_way=tsc]
        run: "sudo ./build/tests/KahawaiTest --auto_start_stop --p_port \"${TEST_PORT_P}\" --r_port \"${TEST_PORT_R}\" --dma_dev \"${TEST_DMA_PORT_P},${TEST_DMA_PORT_R}\" --rss_mode l3_l4 --pacing_way tsc --iova_mode pa --multi_src_port --gtest_filter=Main.*:St20p*:-*ext*"

      - name: Run st2110 st20p test case with kernel loopback
        run: "sudo ./build/tests/KahawaiTest --auto_start_stop --p_port kernel:lo --r_port kernel:lo --gtest_filter=St20p*"

      - name: Kill gtest routines that could have been left
        if: always()
        run: |
          sudo killall -SIGINT KahawaiTest || true
          sudo killall -SIGINT KahawaiUfdTest || true
          sudo killall -SIGINT KahawaiUplTest || true
          sudo killall -SIGINT MtlManager || true
