name: Windows MSYS2 build

on:
  # allow manually trigger
  workflow_dispatch:

permissions:
  contents: read

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      changed: ${{ steps.filter.outputs.msys2_build == 'true' }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v2
        id: filter
        with:
          filters: .github/path_filters.yml

  build:
    needs: changes
    if: ${{ github.repository == 'OpenVisualCloud/Media-Transport-Library' && needs.changes.outputs.changed == 'true' }}
    runs-on: ${{ matrix.win-ver }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { sys: "mingw64", env: "x86_64", dpdk: "23.11", win-ver: "windows-2019" }
          - { sys: "mingw64", env: "x86_64", dpdk: "23.11", win-ver: "windows-2022" }
          # - { sys: "mingw64", env: "x86_64", dpdk: "23.11", win-ver: "windows-2025" }
          # - { sys: "ucrt64",  env: "ucrt-x86_64", dpdk: "23.11", win-ver: "windows-2022" }
          # - { sys: "clang64",  env: "clang-x86_64", dpdk: "23.11", win-ver: "windows-2022" }
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Install msys2 dependencies
        uses: msys2/setup-msys2@7efe20baefed56359985e327d329042cde2434ff # v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          install: >-
             mingw-w64-${{matrix.env}}-openssl
             mingw-w64-${{matrix.env}}-gcc
             mingw-w64-${{matrix.env}}-autotools
             mingw-w64-${{matrix.env}}-cmake
             mingw-w64-${{matrix.env}}-make
             mingw-w64-${{matrix.env}}-ninja
             git
             base-devel
             unzip
             pactoys
          pacboy: >-
             toolchain:p
             pkgconf:p
             meson:p
             json-c:p
             libpcap:p
             gtest:p
             SDL2:p
             SDL2_ttf:p
             dlfcn:p

      - name: Setup Python3 action
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Setup Python3 pip install action
        shell: cmd
        run: python3 -m pip install meson==1.7.2 ninja

      - name: Install npcap-sdk
        run: |
          wget https://nmap.org/npcap/dist/npcap-sdk-1.12.zip
          unzip -d npcap-sdk npcap-sdk-1.12.zip
          cp npcap-sdk/Lib/x64/* ${MSYSTEM_PREFIX}/lib/

      - name: Checkout MTL code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Checkout mman-win32 code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: 'alitrack/mman-win32'
          ref: master
          path: mman-win32

      - name: Build and install mman-win32
        run: |
          cd mman-win32
          ./configure --prefix=${MSYSTEM_PREFIX}
          make -j$(nproc) && make install

      - name: Convert patches for DPDK
        run: |
          cd patches/dpdk/${{matrix.dpdk}}
          ls *.patch | xargs -I{} bash -c 'if [[ $(sed -n '1p' "{}") =~ ^../.*\.patch$ ]]; then cp "$(cat "{}")" "{}"; fi'
          cd windows
          ls *.patch | xargs -I{} bash -c 'if [[ $(sed -n '1p' "{}") =~ ^../.*\.patch$ ]]; then cp "$(cat "{}")" "{}"; fi'

      - name: Hash DPDK patches
        id: hash-patches
        run: |
          HASH=$(sha1sum patches/dpdk/${{matrix.dpdk}}/*.patch patches/dpdk/${{matrix.dpdk}}/windows/*.patch | sha1sum | cut -d" " -f1)
          echo "hash=${HASH}"  >> $GITHUB_OUTPUT

      - name: Cache DPDK
        id: cache-dpdk
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: dpdk
          key: dpdk-${{ matrix.dpdk }}-${{ matrix.sys }}-${{ steps.hash-patches.outputs.hash }}

      - name: Checkout DPDK code
        if: ${{ steps.cache-dpdk.outputs.cache-hit != 'true' }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: 'DPDK/dpdk'
          ref: v${{matrix.dpdk}}
          path: dpdk
          clean: true

      - name: Apply patches for DPDK
        if: ${{ steps.cache-dpdk.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          cd dpdk
          git config user.name github-actions
          git config user.email github-actions@github.com
          git am ../patches/dpdk/${{matrix.dpdk}}/*.patch
          git am ../patches/dpdk/${{matrix.dpdk}}/windows/*.patch

      - name: Configure
        if: ${{ steps.cache-dpdk.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          cd dpdk
          meson setup build
          meson compile -C build
          # export CMAKE_INSTALL_PREFIX="${MSYSTEM_PREFIX}"
          # CC=gcc CXX=g++ meson setup build --buildtype release
          # CC=gcc CXX=g++ meson compile -C build
          # DESTDIR="${MSYSTEM_PREFIX}" CC=gcc CXX=g++ ninja -C build install

      - name: Install cached DPDK dependencies
        run: |
          cd dpdk
          DESTDIR="${MSYSTEM_PREFIX}" meson install -C build --no-rebuild

      - name: Build MTL
        run: CMAKE_INSTALL_PREFIX="${MSYSTEM_PREFIX}" ./build.sh

      - name: Build with debug
        run: |
          export CMAKE_INSTALL_PREFIX="${MSYSTEM_PREFIX}"
          rm build -rf
          ./build.sh debugonly

      - name: Build with TAP
        run: |
          export CMAKE_INSTALL_PREFIX="${MSYSTEM_PREFIX}"
          meson setup tap_build -Denable_tap=true
          meson install -C tap_build
