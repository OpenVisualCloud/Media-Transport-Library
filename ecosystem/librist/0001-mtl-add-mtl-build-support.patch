From b9e2a9ccd2d8b046fc922c7a3768db74e5b8eea9 Mon Sep 17 00:00:00 2001
From: Frank Du <frank.du@intel.com>
Date: Wed, 22 Feb 2023 10:03:58 +0800
Subject: [PATCH 1/2] mtl: add mtl build support

./build_with_mtl.sh

Signed-off-by: Frank Du <frank.du@intel.com>
---
 build.sh                    |   9 +
 build_with_mtl.sh           |   9 +
 include/librist/udpsocket.h |  73 ++++--
 meson.build                 |  11 +
 meson_options.txt           |   1 +
 src/eap.c                   |   6 +-
 src/libevsocket.c           |   4 +-
 src/rist-common.c           |   4 +-
 src/udp.c                   |   7 +-
 src/udpsocket.c             | 487 +++++++++++++++++++++++++-----------
 10 files changed, 436 insertions(+), 175 deletions(-)
 create mode 100755 build.sh
 create mode 100755 build_with_mtl.sh

diff --git a/build.sh b/build.sh
new file mode 100755
index 0000000..fea92d1
--- /dev/null
+++ b/build.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+
+set -e
+
+#meson build -Dbuildtype=debug
+meson build
+ninja -C build
+cd build
+#sudo ninja install
diff --git a/build_with_mtl.sh b/build_with_mtl.sh
new file mode 100755
index 0000000..1971287
--- /dev/null
+++ b/build_with_mtl.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+
+set -e
+
+#meson build -Duse_mtl=true -Dbuildtype=debug
+meson build -Duse_mtl=true
+ninja -C build
+cd build
+#sudo ninja install
diff --git a/include/librist/udpsocket.h b/include/librist/udpsocket.h
index 717b301..be2579d 100644
--- a/include/librist/udpsocket.h
+++ b/include/librist/udpsocket.h
@@ -43,6 +43,10 @@ typedef int socklen_t;
 #include <poll.h>
 #endif /* Windows / POSIX */
 
+#ifdef RIST_HAS_MTL
+#include <mtl/mudp_sockfd_api.h>
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -55,6 +59,21 @@ typedef struct udpsocket_url_param {
 	char *val;
 } udpsocket_url_param_t;
 
+#ifdef RIST_HAS_MTL
+RIST_API int udpsocket_open(uint16_t af);
+RIST_API int udpsocket_bind(int sd, const char *host, uint16_t port);
+RIST_API int udpsocket_open_bind(const char *host, uint16_t port, const char *mciface);
+RIST_API int udpsocket_open_connect(const char *host, uint16_t port, const char *mciface);
+RIST_API int udpsocket_close(int sd);
+RIST_API int udpsocket_send(int sd, const void *buf, size_t size);
+RIST_API int udpsocket_recvfrom(int sd, void *buf, size_t size, int flags, struct sockaddr *addr, socklen_t *addr_len);
+RIST_API int udpsocket_set_nonblocking(int sd);
+RIST_API ssize_t udp_sendto(int sockfd, const void *buf, size_t len, int flags,
+                      const struct sockaddr *dest_addr, socklen_t addrlen);
+RIST_API int udpsocket_send_nonblocking(int sd, const void *buf, size_t size);
+RIST_API int udp_poll(struct pollfd* fds, nfds_t nfds, int timeout);
+RIST_API int udp_fcntl(int fd, int cmd, long arg);
+#else
 /* Open a udp socket of family [af]
  *
  * Returns: socket descriptor, -1 for error (errno is set)
@@ -72,6 +91,36 @@ RIST_API int udpsocket_open(uint16_t af);
  */
 RIST_API int udpsocket_open_bind(const char *host, uint16_t port, const char *mciface);
 
+/*
+ * Explicitly set the mcast interface for the socket [sd] to [mciface] for address
+ * family [family].
+ * Returns 0 on success, -1 on error (errno is set accordingly).
+ */
+RIST_API int udpsocket_set_mcast_iface(int sd, const char *mciface, uint16_t family);
+
+/* Open a udp socket and connect it to remote [host] + [port].
+ *
+ * binds to multicast interface [mciface], (if not NULL).
+ *
+ * Returns: socket descriptor, -1 for error (errno is set)
+ * (In case of gai_error, -1 is returned, errno is not set, check gai_error)
+ *
+ */
+RIST_API int udpsocket_open_connect(const char *host, uint16_t port, const char *mciface);
+
+RIST_API int udpsocket_set_nonblocking(int sd);
+RIST_API int udpsocket_send(int sd, const void *buf, size_t size);
+RIST_API int udpsocket_send_nonblocking(int sd, const void *buf, size_t size);
+RIST_API int udpsocket_sendto(int sd, const void *buf, size_t size, const char *host, uint16_t port);
+RIST_API int udpsocket_recv(int sd, void *buf, size_t size);
+RIST_API int udpsocket_recvfrom(int sd, void *buf, size_t size, int flags, struct sockaddr *addr, socklen_t *addr_len);
+RIST_API int udpsocket_close(int sd);
+RIST_API ssize_t udp_sendto(int sockfd, const void *buf, size_t len, int flags,
+                      const struct sockaddr *dest_addr, socklen_t addrlen);
+RIST_API int udp_poll(struct pollfd* fds, nfds_t nfds, int timeout);
+RIST_API int udp_fcntl(int fd, int cmd, long arg);
+#endif
+
 /*
  * Try to set RX buffer to 1Mbyte and fallback to 256Kbytes if that fails
  * Returns -1 on error, 0 on success.
@@ -110,32 +159,8 @@ RIST_API uint32_t udpsocket_get_buffer_size(int sd);
  */
 RIST_API uint32_t udpsocket_get_buffer_send_size(int sd);
 
-/*
- * Explicitly set the mcast interface for the socket [sd] to [mciface] for address
- * family [family].
- * Returns 0 on success, -1 on error (errno is set accordingly).
- */
-RIST_API int udpsocket_set_mcast_iface(int sd, const char *mciface, uint16_t family);
-
-/* Open a udp socket and connect it to remote [host] + [port].
- *
- * binds to multicast interface [mciface], (if not NULL).
- *
- * Returns: socket descriptor, -1 for error (errno is set)
- * (In case of gai_error, -1 is returned, errno is not set, check gai_error)
- *
- */
-RIST_API int udpsocket_open_connect(const char *host, uint16_t port, const char *mciface);
-
 RIST_API int udpsocket_resolve_host(const char *host, uint16_t port, struct sockaddr *addr);
 
-RIST_API int udpsocket_set_nonblocking(int sd);
-RIST_API int udpsocket_send(int sd, const void *buf, size_t size);
-RIST_API int udpsocket_send_nonblocking(int sd, const void *buf, size_t size);
-RIST_API int udpsocket_sendto(int sd, const void *buf, size_t size, const char *host, uint16_t port);
-RIST_API int udpsocket_recv(int sd, void *buf, size_t size);
-RIST_API int udpsocket_recvfrom(int sd, void *buf, size_t size, int flags, struct sockaddr *addr, socklen_t *addr_len);
-RIST_API int udpsocket_close(int sd);
 RIST_API int udpsocket_parse_url(char *url, char *address, int address_maxlen, uint16_t *port, int *local);
 RIST_API int udpsocket_parse_url_parameters(const char *url, udpsocket_url_param_t *params,
          int max_params, uint32_t *clean_url_len);
diff --git a/meson.build b/meson.build
index 1fc7e55..cb7f5d5 100755
--- a/meson.build
+++ b/meson.build
@@ -157,6 +157,17 @@ if not cc.check_header('stdatomic.h')
     endif
 endif
 
+if get_option('use_mtl')
+  mtl = dependency('mtl', required : false)
+  if mtl.found()
+    add_global_arguments('-DRIST_HAS_MTL', language : 'c')
+    deps += mtl
+    message('Build with mtl UDP stack')
+  else
+    error('mtl not found')
+  endif
+endif
+
 #On ubuntu cjson does not come with pkgconfig files, hence the extended checking.
 if not builtin_cjson
 	cjson_lib = dependency('libcjson', required: false)
diff --git a/meson_options.txt b/meson_options.txt
index 5232dfa..e63ec5f 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -10,3 +10,4 @@ option('have_mingw_pthreads', type: 'boolean', value: false)
 option('allow_insecure_iv_fallback', type: 'boolean', value: false)
 option('allow_obj_filter', type: 'boolean', value: false)
 option('use_tun', type: 'boolean', value: false)
+option('use_mtl', type: 'boolean', value: false)
diff --git a/src/eap.c b/src/eap.c
index d1acd5b..85114f1 100644
--- a/src/eap.c
+++ b/src/eap.c
@@ -87,7 +87,7 @@ static int send_eapol_pkt(struct eapsrp_ctx *ctx, uint8_t eapoltype, uint8_t eap
 		ctx->timeout_retries = 0;
 	}
 
-	ssize_t bytes = sendto(ctx->peer->sd, (const char *)buf, (EAPOL_EAP_HDRS_OFFSET + payload_len), 0, &ctx->peer->u.address, ctx->peer->address_len);
+	ssize_t bytes = udp_sendto(ctx->peer->sd, (const char *)buf, (EAPOL_EAP_HDRS_OFFSET + payload_len), 0, &ctx->peer->u.address, ctx->peer->address_len);
 	if (bytes != (ssize_t)(offset + payload_len))
 	{
 		//sockerr
@@ -521,7 +521,7 @@ int eap_start(struct eapsrp_ctx *ctx)
 	struct eapol_hdr *eapol = (struct eapol_hdr *)&outpkt[sizeof(*gre)];
 	eapol->eapversion = 2;
 	eapol->eaptype = EAPOL_TYPE_START;
-	sendto(ctx->peer->sd, (const char *)outpkt, (sizeof(*gre) + sizeof(*eapol)), 0, &ctx->peer->u.address, ctx->peer->address_len);
+	udp_sendto(ctx->peer->sd, (const char *)outpkt, (sizeof(*gre) + sizeof(*eapol)), 0, &ctx->peer->u.address, ctx->peer->address_len);
 	//CHECK
 	return 0;
 }
@@ -627,7 +627,7 @@ void eap_periodic(struct eapsrp_ctx *ctx)
 	{
 		if (ctx->last_pkt)
 		{
-			sendto(ctx->peer->sd, (const char *)ctx->last_pkt, ctx->last_pkt_size, 0, &ctx->peer->u.address, ctx->peer->address_len);
+			udp_sendto(ctx->peer->sd, (const char *)ctx->last_pkt, ctx->last_pkt_size, 0, &ctx->peer->u.address, ctx->peer->address_len);
 			//check
 			ctx->timeout_retries++;
 			ctx->last_timestamp = now;
diff --git a/src/libevsocket.c b/src/libevsocket.c
index 56e319e..bc500ff 100755
--- a/src/libevsocket.c
+++ b/src/libevsocket.c
@@ -206,7 +206,7 @@ static void rebuild_poll(struct evsocket_ctx *ctx)
 	}
 
 	if (ctx->n_events > 0) {
-		ctx->pfd = malloc(sizeof(struct pollfd) * ctx->n_events);
+		ctx->pfd = malloc(sizeof(*ctx->pfd) * ctx->n_events);
 		ctx->_array = calloc(sizeof(struct evsocket_event), ctx->n_events);
 	}
 
@@ -323,7 +323,7 @@ int evsocket_loop_single(struct evsocket_ctx *ctx, int timeout, int max_events)
 		goto loop_error;
 	}
 
-	pollret = poll(ctx->pfd, ctx->n_events, timeout);
+	pollret = udp_poll(ctx->pfd, ctx->n_events, timeout);
 	if (pollret <= 0) {
 		if (pollret < 0) {
 			rist_log_priv3( RIST_LOG_ERROR, "libevsocket, evsocket_loop: poll returned %d, n_events = %d, error = %d\n",
diff --git a/src/rist-common.c b/src/rist-common.c
index 00fc1e1..f42e448 100755
--- a/src/rist-common.c
+++ b/src/rist-common.c
@@ -2336,11 +2336,11 @@ static void rist_peer_recv_wrap(struct evsocket_ctx *evctx, int fd, short revent
 			buffer_offset = RIST_GRE_PROTOCOL_REDUCED_SIZE;
 
 		if (peer->address_family == AF_INET6) {
-			recv_bufsize = recvfrom(peer->sd, (char*)recv_buf + buffer_offset, RIST_MAX_PACKET_SIZE, MSG_DONTWAIT, (struct sockaddr *) &addr6, &addrlen);
+			recv_bufsize = udpsocket_recvfrom(peer->sd, (char*)recv_buf + buffer_offset, RIST_MAX_PACKET_SIZE, MSG_DONTWAIT, (struct sockaddr *) &addr6, &addrlen);
 			family = AF_INET6;
 			addr = (struct sockaddr *) &addr6;
 		} else {
-			recv_bufsize = recvfrom(peer->sd, (char *)recv_buf + buffer_offset, RIST_MAX_PACKET_SIZE, MSG_DONTWAIT, (struct sockaddr *)&addr4, &addrlen);
+			recv_bufsize = udpsocket_recvfrom(peer->sd, (char *)recv_buf + buffer_offset, RIST_MAX_PACKET_SIZE, MSG_DONTWAIT, (struct sockaddr *)&addr4, &addrlen);
 			addr = (struct sockaddr *) &addr4;
 		}
 #ifndef _WIN32
diff --git a/src/udp.c b/src/udp.c
index 7ba3a8c..eb68743 100755
--- a/src/udp.c
+++ b/src/udp.c
@@ -294,7 +294,7 @@ size_t rist_send_seq_rtcp(struct rist_peer *p, uint16_t seq_rtp, uint8_t payload
 		}
 	}
 
-	ret = sendto(p->sd,(const char*)data, len, 0, &(p->u.address), p->address_len);
+	ret = udp_sendto(p->sd,(const char*)data, len, 0, &(p->u.address), p->address_len);
 
 out:
 	if (RIST_UNLIKELY(ret <= 0)) {
@@ -521,7 +521,7 @@ void rist_create_socket(struct rist_peer *peer)
 			peer->multicast = IN6_IS_ADDR_MULTICAST(&addrv6->sin6_addr);
 		}
 		if (peer->multicast) {
-			rist_log_priv(get_cctx(peer), RIST_LOG_INFO, "Peer configured for multicast");
+			rist_log_priv(get_cctx(peer), RIST_LOG_INFO, "Peer configured for multicast\n");
 		}
 		// We use sendto ... so, no need to connect directly here
 		peer->sd = udpsocket_open(peer->address_family);
@@ -556,8 +556,9 @@ void rist_create_socket(struct rist_peer *peer)
 	if (peer->cname[0] == 0)
 		rist_populate_cname(peer);
 	rist_log_priv(get_cctx(peer), RIST_LOG_INFO, "Peer cname is %s\n", peer->cname);
+
 #ifndef _WIN32
-	if (fcntl(peer->sd, F_SETFD, FD_CLOEXEC) == -1) {
+	if (udp_fcntl(peer->sd, F_SETFD, FD_CLOEXEC) == -1) {
 		udpsocket_close(peer->sd);
 		rist_log_priv(get_cctx(peer), RIST_LOG_ERROR, "Could not set close-on-exec\n");
 		peer->sd = -1;
diff --git a/src/udpsocket.c b/src/udpsocket.c
index 20ef047..959f13a 100644
--- a/src/udpsocket.c
+++ b/src/udpsocket.c
@@ -14,11 +14,9 @@
 #endif
 #endif
 
-/* Private functions */
-static const int yes = 1; // no = 0;
+int udp_setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
 
 /* Public API */
-
 int udpsocket_resolve_host(const char *host, uint16_t port, struct sockaddr *addr)
 {
 	struct sockaddr_in *a4 = (struct sockaddr_in *)addr;
@@ -53,138 +51,6 @@ int udpsocket_resolve_host(const char *host, uint16_t port, struct sockaddr *add
 	return 0;
 }
 
-int udpsocket_open(uint16_t af)
-{
-	int sd = socket(af, SOCK_DGRAM, 0);
-	if (sd < 0) {
-#ifdef _WIN32
-		sd = -1 * WSAGetLastError();
-#endif
-	}
-	return sd;
-}
-
-int udpsocket_set_optimal_buffer_size(int sd)
-{
-	uint32_t bufsize = UDPSOCKET_SOCK_BUFSIZE;
-	uint32_t current_recvbuf = udpsocket_get_buffer_size(sd);
-	if (current_recvbuf < bufsize){
-		setsockopt(sd, SOL_SOCKET, SO_RCVBUF, (char *)&bufsize, sizeof(uint32_t));
-		current_recvbuf = udpsocket_get_buffer_size(sd);
-#if defined(SO_RCVBUFFORCE)
-		if (current_recvbuf < bufsize){
-			setsockopt(sd, SOL_SOCKET, SO_RCVBUFFORCE, (char *)&bufsize, sizeof(uint32_t));
-			current_recvbuf = udpsocket_get_buffer_size(sd);
-		}
-#endif
-	}
-	if (current_recvbuf < bufsize){
-		// Settle for a smaller size
-		bufsize = UDPSOCKET_SOCK_BUFSIZE/5;
-		setsockopt(sd, SOL_SOCKET, SO_RCVBUF, (char *)&bufsize, sizeof(uint32_t));
-		current_recvbuf = udpsocket_get_buffer_size(sd);
-#if defined(SO_RCVBUFFORCE)
-		if (current_recvbuf < bufsize){
-			setsockopt(sd, SOL_SOCKET, SO_RCVBUFFORCE, (char *)&bufsize, sizeof(uint32_t));
-			current_recvbuf = udpsocket_get_buffer_size(sd);
-		}
-#endif
-	}
-	if (current_recvbuf < bufsize){
-		rist_log_priv3( RIST_LOG_ERROR, "Your UDP receive buffer is set < 200 kbytes (%"PRIu32") and the kernel denied our request for an increase. It's recommended to set your net.core.rmem_max setting to at least 200 kbyte for best results.", current_recvbuf);
-		return -1;
-	}
-	return 0;
-}
-
-int udpsocket_set_optimal_buffer_send_size(int sd)
-{
-	uint32_t bufsize = UDPSOCKET_SOCK_BUFSIZE;
-	uint32_t current_sendbuf = udpsocket_get_buffer_send_size(sd);
-	if (current_sendbuf < bufsize){
-		setsockopt(sd, SOL_SOCKET, SO_SNDBUF, (char *)&bufsize, sizeof(uint32_t));
-		current_sendbuf = udpsocket_get_buffer_send_size(sd);
-#if defined(SO_SNDBUFFORCE)
-		if (current_sendbuf < bufsize){
-			setsockopt(sd, SOL_SOCKET, SO_SNDBUFFORCE, (char *)&bufsize, sizeof(uint32_t));
-			current_sendbuf = udpsocket_get_buffer_send_size(sd);
-		}
-#endif
-	}
-	if (current_sendbuf < bufsize){
-		// Settle for a smaller size
-		bufsize = UDPSOCKET_SOCK_BUFSIZE/5;
-		setsockopt(sd, SOL_SOCKET, SO_SNDBUF, (char *)&bufsize, sizeof(uint32_t));
-		current_sendbuf = udpsocket_get_buffer_send_size(sd);
-#if defined(SO_SNDBUFFORCE)
-		if (current_sendbuf < bufsize){
-			setsockopt(sd, SOL_SOCKET, SO_SNDBUFFORCE, (char *)&bufsize, sizeof(uint32_t));
-			current_sendbuf = udpsocket_get_buffer_send_size(sd);
-		}
-#endif
-	}
-	if (current_sendbuf < bufsize){
-		rist_log_priv3( RIST_LOG_ERROR, "Your UDP send buffer is set < 200 kbytes (%"PRIu32") and the kernel denied our request for an increase. It's recommended to set your net.core.rmem_max setting to at least 200 kbyte for best results.", current_sendbuf);
-		return -1;
-	}
-	return 0;
-}
-
-int udpsocket_set_buffer_size(int sd, uint32_t bufsize)
-{
-	if (setsockopt(sd, SOL_SOCKET, SO_RCVBUF, (char *)&bufsize, sizeof(uint32_t)) < 0)
-		return -1;
-	return 0;
-}
-
-int udpsocket_set_buffer_send_size(int sd, uint32_t bufsize)
-{
-	if (setsockopt(sd, SOL_SOCKET, SO_SNDBUF, (char *)&bufsize, sizeof(uint32_t)) < 0)
-		return -1;
-	return 0;
-}
-
-uint32_t udpsocket_get_buffer_size(int sd)
-{
-	uint32_t bufsize;
-	socklen_t val_size = sizeof(uint32_t);
-	if (getsockopt(sd, SOL_SOCKET, SO_RCVBUF, (char *)&bufsize, &val_size) < 0)
-		return 0;
-	return bufsize;
-}
-
-uint32_t udpsocket_get_buffer_send_size(int sd)
-{
-	uint32_t bufsize;
-	socklen_t val_size = sizeof(uint32_t);
-	if (getsockopt(sd, SOL_SOCKET, SO_SNDBUF, (char *)&bufsize, &val_size) < 0)
-		return 0;
-	return bufsize;
-}
-
-int udpsocket_set_mcast_iface(int sd, const char *mciface, uint16_t family)
-{
-#ifndef _WIN32
-	int scope = if_nametoindex(mciface);
-#else
-	int scope = atoi(mciface);
-#endif
-	if (scope == 0)
-		return -1;
-#ifdef _WIN32
-	RIST_MARK_UNUSED(family);
-	return setsockopt(sd, SOL_IP, IP_MULTICAST_IF, (char *)&scope, sizeof(scope));
-#else
-	if (family == AF_INET6) {
-		return setsockopt(sd, SOL_IPV6, IPV6_MULTICAST_IF, &scope, sizeof(scope));
-	} else {
-		struct ip_mreqn req = { .imr_ifindex = scope };
-		return setsockopt(sd, SOL_IP, IP_MULTICAST_IF, &req, sizeof(req));
-	}
-	return -1;
-#endif
-}
-
 bool is_ip_address(const char *ipaddress, int family) {
 	struct sockaddr_in sa;
 	int result = inet_pton(family, ipaddress, &(sa.sin_addr));
@@ -220,7 +86,7 @@ int udpsocket_join_mcast_group(int sd, const char* miface, struct sockaddr* sa,
 		gr.gr_interface = ifindex;
 		memcpy(&gr.gr_group, mcast_v4, sizeof(*mcast_v4));
 		rist_log_priv3(RIST_LOG_INFO, "Joining multicast address: %s with %s\n", mcastaddress, miface);
-		if (setsockopt(sd, SOL_IP, MCAST_JOIN_GROUP, (const char *)&gr, sizeof(gr)) == 0) {
+		if (udp_setsockopt(sd, SOL_IP, MCAST_JOIN_GROUP, (const char *)&gr, sizeof(gr)) == 0) {
 			return 0;
 		}
 	}
@@ -230,7 +96,7 @@ int udpsocket_join_mcast_group(int sd, const char* miface, struct sockaddr* sa,
 	struct ip_mreq group;
 	group.imr_multiaddr.s_addr = mcast_v4->sin_addr.s_addr;
 	group.imr_interface.s_addr = src_addr;
-	if (setsockopt(sd, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char *)&group, sizeof(group)) < 0) {
+	if (udp_setsockopt(sd, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char *)&group, sizeof(group)) < 0) {
 		rist_log_priv3( RIST_LOG_ERROR, "Failed to join multicast group\n");
 		goto fail;
 	}
@@ -240,6 +106,204 @@ fail:
 	return -1;
 }
 
+#ifdef RIST_HAS_MTL
+int udpsocket_bind(int sd, const char *host, uint16_t port)
+{
+	struct sockaddr_in6 raw;
+	uint16_t addrlen;
+
+	if (udpsocket_resolve_host(host, port, (struct sockaddr *)&raw) < 0) {
+		rist_log_priv3(RIST_LOG_ERROR, "%s, resolve host fail\n", __func__);
+		return -EIO;
+	}
+	if (raw.sin6_family == AF_INET6) {
+		addrlen = sizeof(struct sockaddr_in6);
+	} else {
+		addrlen = sizeof(struct sockaddr_in);
+	}
+
+	int ret = mufd_bind(sd, (const struct sockaddr *)&raw, addrlen);
+	if (ret < 0) {
+		return ret;
+	}
+
+	rist_log_priv3(RIST_LOG_INFO, "%s, sd %p, %s:%u\n", __func__, sd, host, port);
+	return 0;
+}
+
+int udpsocket_open_bind(const char *host, uint16_t port, const char *mciface)
+{
+	int sd;
+	struct sockaddr_in6 raw;
+	uint16_t addrlen;
+
+	if (udpsocket_resolve_host(host, port, (struct sockaddr *)&raw) < 0) {
+		rist_log_priv3(RIST_LOG_ERROR, "%s, resolve host fail\n", __func__);
+		return -EIO;
+	}
+	int is_multicast = 0;
+	if (raw.sin6_family == AF_INET6) {
+		addrlen = sizeof(struct sockaddr_in6);
+		is_multicast = IN6_IS_ADDR_MULTICAST(&raw.sin6_addr);
+	} else {
+		struct sockaddr_in *tmp = (struct sockaddr_in*)&raw;
+		addrlen = sizeof(struct sockaddr_in);
+		is_multicast = IN_MULTICAST(ntohl(tmp->sin_addr.s_addr));
+	}
+
+	sd = udpsocket_open(raw.sin6_family);
+	if (sd < 0) {
+		rist_log_priv3(RIST_LOG_ERROR, "%s, open socket fail\n", __func__);
+		return sd;
+	}
+
+	int ret = mufd_bind(sd, (const struct sockaddr *)&raw, addrlen);
+	if (ret < 0) {
+		rist_log_priv3(RIST_LOG_ERROR, "%s, bind fail\n", __func__);
+		udpsocket_close(sd);
+		return ret;
+	}
+
+	if (is_multicast) {
+		if (udpsocket_join_mcast_group(sd, mciface, (struct sockaddr *)&raw, raw.sin6_family) != 0) {
+			rist_log_priv3( RIST_LOG_ERROR, "Could not join multicast group: %s on %s\n", host, mciface);
+			return -1;
+		}
+	}
+
+	rist_log_priv3(RIST_LOG_INFO, "%s, sd %p, %s:%u %s\n", __func__, sd, host, port, mciface);
+	return sd;
+}
+
+int udpsocket_open(uint16_t af)
+{
+	return mufd_socket(af, SOCK_DGRAM, 0);
+}
+
+int udpsocket_open_connect(const char *host, uint16_t port, const char *mciface)
+{
+	RIST_MARK_UNUSED(host);
+	RIST_MARK_UNUSED(port);
+	RIST_MARK_UNUSED(mciface);
+	rist_log_priv3(RIST_LOG_ERROR, "%s, not implement\n", __func__);
+	return -EIO;
+}
+
+int udpsocket_close(int sd)
+{
+	return mufd_close(sd);
+}
+
+int udpsocket_send(int sd, const void *buf, size_t size)
+{
+	RIST_MARK_UNUSED(sd);
+	RIST_MARK_UNUSED(buf);
+	RIST_MARK_UNUSED(size);
+	rist_log_priv3(RIST_LOG_ERROR, "%s, not implement\n", __func__);
+	return 0;
+}
+
+ssize_t udp_sendto(int sockfd, const void *buf, size_t len, int flags,
+                      const struct sockaddr *dest_addr, socklen_t addrlen) {
+#if 0
+	struct sockaddr_in* saddr = (struct sockaddr_in*)dest_addr;
+	if (len < 500) {
+	rist_log_priv3(RIST_LOG_DEBUG, "%s, sockfd %d len %d port %u\n", __func__,
+		sockfd, (int)len, ntohs(saddr->sin_port));
+	}
+#endif
+	return mufd_sendto(sockfd, buf, len, flags, dest_addr, addrlen);
+}
+
+int udpsocket_recvfrom(int sd, void *buf, size_t size, int flags, struct sockaddr *addr, socklen_t *addr_len)
+{
+	int ret;
+	ret = mufd_recvfrom(sd, buf, size, flags, addr, addr_len);
+#if 0
+	struct sockaddr_in* saddr = (struct sockaddr_in*)addr;
+	if (ret < 500) {
+	rist_log_priv3(RIST_LOG_INFO, "%s, sd %d size %d port %u ret %d\n", __func__,
+		sd, (int)size, ntohs(saddr->sin_port), ret);
+	}
+#endif
+	return ret;
+}
+
+int udpsocket_set_nonblocking(int sd)
+{
+	RIST_MARK_UNUSED(sd);
+	rist_log_priv3(RIST_LOG_INFO, "%s, not implement\n", __func__);
+	return 0;
+}
+
+int udpsocket_send_nonblocking(int sd, const void *buf, size_t size)
+{
+	return udpsocket_send(sd, buf, size);
+}
+
+int udp_poll(struct pollfd* fds, nfds_t nfds, int timeout)
+{
+#if 0
+  for (nfds_t i = 0; i < nfds; i++) {
+    rist_log_priv3(RIST_LOG_INFO, "%s, fd %d\n", __func__, fds[i].fd);
+  }
+#endif
+
+  return mufd_poll(fds, nfds, timeout);
+}
+
+int udp_getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen)
+{
+	return mufd_getsockopt(sockfd, level, optname, optval, optlen);
+}
+
+int udp_setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen)
+{
+	return mufd_setsockopt(sockfd, level, optname, optval, optlen);
+}
+
+int udp_fcntl(int fd, int cmd, long arg)
+{
+	return mufd_fcntl(fd, cmd, arg);
+}
+#else
+/* Private functions */
+static const int yes = 1; // no = 0;
+
+int udpsocket_open(uint16_t af)
+{
+	int sd = socket(af, SOCK_DGRAM, 0);
+	if (sd < 0) {
+#ifdef _WIN32
+		sd = -1 * WSAGetLastError();
+#endif
+	}
+	return sd;
+}
+
+int udpsocket_set_mcast_iface(int sd, const char *mciface, uint16_t family)
+{
+#ifndef _WIN32
+	int scope = if_nametoindex(mciface);
+#else
+	int scope = atoi(mciface);
+#endif
+	if (scope == 0)
+		return -1;
+#ifdef _WIN32
+	RIST_MARK_UNUSED(family);
+	return udp_setsockopt(sd, SOL_IP, IP_MULTICAST_IF, (char *)&scope, sizeof(scope));
+#else
+	if (family == AF_INET6) {
+		return udp_setsockopt(sd, SOL_IPV6, IPV6_MULTICAST_IF, &scope, sizeof(scope));
+	} else {
+		struct ip_mreqn req = { .imr_ifindex = scope };
+		return udp_setsockopt(sd, SOL_IP, IP_MULTICAST_IF, &req, sizeof(req));
+	}
+	return -1;
+#endif
+}
+
 int udpsocket_open_connect(const char *host, uint16_t port, const char *mciface)
 {
 	int sd;
@@ -266,11 +330,11 @@ int udpsocket_open_connect(const char *host, uint16_t port, const char *mciface)
 		ttlcmd = IP_MULTICAST_TTL;
 	}
 
-	if (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, (char *)&yes, sizeof(int)) < 0) {
+	if (udp_setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, (char *)&yes, sizeof(int)) < 0) {
 		/* Non-critical error */
 		rist_log_priv3( RIST_LOG_ERROR,"Cannot set SO_REUSEADDR: %s\n", strerror(errno));
 	}
-	if (setsockopt(sd, proto, ttlcmd, (char *)&ttl, sizeof(ttl)) < 0) {
+	if (udp_setsockopt(sd, proto, ttlcmd, (char *)&ttl, sizeof(ttl)) < 0) {
 		/* Non-critical error */
 		rist_log_priv3( RIST_LOG_ERROR,"Cannot set socket MAX HOPS: %s\n", strerror(errno));
 	}
@@ -308,7 +372,7 @@ int udpsocket_open_bind(const char *host, uint16_t port, const char *mciface)
 		addrlen = sizeof(struct sockaddr_in);
 		is_multicast = IN_MULTICAST(ntohl(tmp->sin_addr.s_addr));
 	}
-	if (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, (char *)&yes, sizeof(int)) < 0) {
+	if (udp_setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, (char *)&yes, sizeof(int)) < 0) {
 		/* Non-critical error */
 		rist_log_priv3( RIST_LOG_ERROR, "Cannot set SO_REUSEADDR: %s\n", strerror(errno));
 	}
@@ -372,6 +436,19 @@ int udpsocket_sendto(int sd, const void *buf, size_t size, const char *host, uin
 	return (int)sendto(sd, buf, size, 0, (struct sockaddr *)(&raw), addrlen);
 }
 
+ssize_t udp_sendto(int sockfd, const void *buf, size_t len, int flags,
+                      const struct sockaddr *dest_addr, socklen_t addrlen) {
+#if 0
+	struct sockaddr_in* saddr = (struct sockaddr_in*)dest_addr;
+
+	if (len < 500) {
+	rist_log_priv3(RIST_LOG_DEBUG, "%s, sockfd %p len %d port %u\n", __func__,
+		sockfd, (int)len, ntohs(saddr->sin_port));
+	}
+#endif
+	return sendto(sockfd, buf, len, flags, dest_addr, addrlen);
+}
+
 int udpsocket_recv(int sd, void *buf, size_t size)
 {
 	return (int)recv(sd, buf, size, 0);
@@ -379,7 +456,16 @@ int udpsocket_recv(int sd, void *buf, size_t size)
 
 int udpsocket_recvfrom(int sd, void *buf, size_t size, int flags, struct sockaddr *addr, socklen_t *addr_len)
 {
-	return (int)recvfrom(sd, buf, size, flags, addr, addr_len);
+	int ret;
+	ret = recvfrom(sd, buf, size, flags, addr, addr_len);
+#if 0
+	struct sockaddr_in* saddr = (struct sockaddr_in*)addr;
+	if (ret < 500) {
+	rist_log_priv3(RIST_LOG_INFO, "%s, sd %p size %d port %u ret %d\n", __func__,
+		sd, (int)size, ntohs(saddr->sin_port), ret);
+	}
+#endif
+	return ret;
 }
 
 int udpsocket_close(int sd)
@@ -391,6 +477,125 @@ int udpsocket_close(int sd)
 #endif
 }
 
+int udp_poll(struct pollfd* fds, nfds_t nfds, int timeout)
+{
+  return poll(fds, nfds, timeout);
+}
+
+int udp_getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen)
+{
+	return getsockopt(sockfd, level, optname, optval, optlen);
+}
+
+int udp_setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen)
+{
+	return setsockopt(sockfd, level, optname, optval, optlen);
+}
+
+int udp_fcntl(int fd, int cmd, long arg)
+{
+	return fcntl(fd, cmd, arg);
+}
+#endif
+
+int udpsocket_set_optimal_buffer_send_size(int sd)
+{
+	uint32_t bufsize = UDPSOCKET_SOCK_BUFSIZE;
+	uint32_t current_sendbuf = udpsocket_get_buffer_send_size(sd);
+	if (current_sendbuf < bufsize){
+		udp_setsockopt(sd, SOL_SOCKET, SO_SNDBUF, (char *)&bufsize, sizeof(uint32_t));
+		current_sendbuf = udpsocket_get_buffer_send_size(sd);
+#if defined(SO_SNDBUFFORCE)
+		if (current_sendbuf < bufsize){
+			udp_setsockopt(sd, SOL_SOCKET, SO_SNDBUFFORCE, (char *)&bufsize, sizeof(uint32_t));
+			current_sendbuf = udpsocket_get_buffer_send_size(sd);
+		}
+#endif
+	}
+	if (current_sendbuf < bufsize){
+		// Settle for a smaller size
+		bufsize = UDPSOCKET_SOCK_BUFSIZE/5;
+		udp_setsockopt(sd, SOL_SOCKET, SO_SNDBUF, (char *)&bufsize, sizeof(uint32_t));
+		current_sendbuf = udpsocket_get_buffer_send_size(sd);
+#if defined(SO_SNDBUFFORCE)
+		if (current_sendbuf < bufsize){
+			udp_setsockopt(sd, SOL_SOCKET, SO_SNDBUFFORCE, (char *)&bufsize, sizeof(uint32_t));
+			current_sendbuf = udpsocket_get_buffer_send_size(sd);
+		}
+#endif
+	}
+	if (current_sendbuf < bufsize){
+		rist_log_priv3( RIST_LOG_INFO, "Your UDP send buffer is set < 200 kbytes (%"PRIu32") and the kernel denied our request for an increase. It's recommended to set your net.core.rmem_max setting to at least 200 kbyte for best results.", current_sendbuf);
+		return -1;
+	}
+	return 0;
+}
+
+int udpsocket_set_buffer_size(int sd, uint32_t bufsize)
+{
+	if (udp_setsockopt(sd, SOL_SOCKET, SO_RCVBUF, (char *)&bufsize, sizeof(uint32_t)) < 0)
+		return -1;
+	return 0;
+}
+
+int udpsocket_set_buffer_send_size(int sd, uint32_t bufsize)
+{
+	if (udp_setsockopt(sd, SOL_SOCKET, SO_SNDBUF, (char *)&bufsize, sizeof(uint32_t)) < 0)
+		return -1;
+	return 0;
+}
+
+uint32_t udpsocket_get_buffer_size(int sd)
+{
+	uint32_t bufsize;
+	socklen_t val_size = sizeof(uint32_t);
+	if (udp_getsockopt(sd, SOL_SOCKET, SO_RCVBUF, (char *)&bufsize, &val_size) < 0)
+		return 0;
+	return bufsize;
+}
+
+uint32_t udpsocket_get_buffer_send_size(int sd)
+{
+	uint32_t bufsize;
+	socklen_t val_size = sizeof(uint32_t);
+	if (udp_getsockopt(sd, SOL_SOCKET, SO_SNDBUF, (char *)&bufsize, &val_size) < 0)
+		return 0;
+	return bufsize;
+}
+
+int udpsocket_set_optimal_buffer_size(int sd)
+{
+	uint32_t bufsize = UDPSOCKET_SOCK_BUFSIZE;
+	uint32_t current_recvbuf = udpsocket_get_buffer_size(sd);
+	if (current_recvbuf < bufsize){
+		udp_setsockopt(sd, SOL_SOCKET, SO_RCVBUF, (char *)&bufsize, sizeof(uint32_t));
+		current_recvbuf = udpsocket_get_buffer_size(sd);
+#if defined(SO_RCVBUFFORCE)
+		if (current_recvbuf < bufsize){
+			udp_setsockopt(sd, SOL_SOCKET, SO_RCVBUFFORCE, (char *)&bufsize, sizeof(uint32_t));
+			current_recvbuf = udpsocket_get_buffer_size(sd);
+		}
+#endif
+	}
+	if (current_recvbuf < bufsize){
+		// Settle for a smaller size
+		bufsize = UDPSOCKET_SOCK_BUFSIZE/5;
+		udp_setsockopt(sd, SOL_SOCKET, SO_RCVBUF, (char *)&bufsize, sizeof(uint32_t));
+		current_recvbuf = udpsocket_get_buffer_size(sd);
+#if defined(SO_RCVBUFFORCE)
+		if (current_recvbuf < bufsize){
+			udp_setsockopt(sd, SOL_SOCKET, SO_RCVBUFFORCE, (char *)&bufsize, sizeof(uint32_t));
+			current_recvbuf = udpsocket_get_buffer_size(sd);
+		}
+#endif
+	}
+	if (current_recvbuf < bufsize){
+		rist_log_priv3( RIST_LOG_INFO, "Your UDP receive buffer is set < 200 kbytes (%"PRIu32") and the kernel denied our request for an increase. It's recommended to set your net.core.rmem_max setting to at least 200 kbyte for best results.", current_recvbuf);
+		return -1;
+	}
+	return 0;
+}
+
 int udpsocket_parse_url_parameters(const char *url, udpsocket_url_param_t *params, int max_params,
 	uint32_t *clean_url_len)
 {
-- 
2.34.1

