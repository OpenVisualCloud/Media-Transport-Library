# SPDX-License-Identifier: BSD-3-Clause
# Copyright(c) 2024-2025 Intel Corporation

import glob
import os
import time

import pytest
from mtl_engine import ffmpeg_app
from mtl_engine.const import LOG_FOLDER
from mtl_engine.ffmpeg_app import check_latency_from_script
from mtl_engine.media_files import yuv_files_end_to_end


# Parametrize test for different video formats and time multipliers
@pytest.mark.parametrize(
    "video_format,test_time_multiplier,expected_latency",
    [
        ("i1080p25", 1, 1620),
        ("i1080p60", 1, 1660),
        ("i720p25", 1, 1620),
        ("i720p60", 1, 1620),
        ("i2160p119", 1, 1670),
        ("i2160p30", 1, 1660),
        ("i2160p60", 1, 1660),
    ],
)
# Parametrize test for different output formats
@pytest.mark.parametrize("output_format", ["mp4"])
def test_ffmpeg_end_to_end_latency(
    hosts,
    test_time,
    build,
    media,
    nic_port_list,
    video_format,
    test_time_multiplier,
    output_format,
    expected_latency,
    cleanup_output_files,
):

    # Cleanup before test
    cleanup_pattern = (
        f"{build}/tests/test_ffmpeg_end_to_end_latency_*_out_0.{output_format}"
    )
    cleanup_output_files(cleanup_pattern)
    time.sleep(1)

    # Get the video file info for the selected video format
    video_file = yuv_files_end_to_end[video_format]

    # Run the main FFmpeg test (TX and RX pipelines)
    ffmpeg_app.execute_test_latency_single_or_dual(
        test_time=test_time * test_time_multiplier,
        build=build,
        hosts=hosts,
        type_="frame",
        video_format=video_format,
        pg_format=video_file["format"],
        video_url=os.path.join(media, video_file["filename"]),
        output_format=output_format,
        dual=False,
    )

    # Find the output file generated by the test
    pattern = f"{build}/tests/test_ffmpeg_end_to_end_latency_*_out_0.{output_format}"
    recv_files = glob.glob(pattern)
    if not recv_files:
        raise FileNotFoundError(f"No output file found matching: {pattern}")
    # Select the most recently modified output file
    recv_file = max(recv_files, key=os.path.getmtime)

    # Path for the latency measurement output image
    latency_jpg = f"{LOG_FOLDER}/ffmpeg_latency_{video_format}_latency.jpg"
    script_path = f"{build}/tests/tools/latency_measurement/text_detection.py"

    # Run the latency measurement script and check if latency is within expected bounds
    check_latency_from_script(
        script_path,
        recv_file,
        latency_jpg,
        expected_latency,
        host=list(hosts.values())[0],
    )

    # Cleanup after test
    cleanup_output_files(cleanup_pattern)

    time.sleep(5)
